1. Проект - IT_блог реализован с использованием технологий: Django + DRF + NuxtJS + MySQL + Docker.
2. Это классический блог с публикацией постов/статей (из админ панели) с возможностью их просматривать и комментрировать (для зарегистрированных пользователей).

-----> V1.0 Django - классический
# Подробности:
3. Верстка построена с использованием Bootstrap5. Адаптивна под все основные размеры экранов + mobile.
4. Django шаблоны спроектированы следующим образом: есть главный шаблон конструктор, a остальные рендарятся в него.
5. В оформлении использовались CSS + SCSS.
6. Присутствует режим смены темы (темная/светлая).
7. Реализован поиск постов/статей с использованием технологии нечеткого поиска (вероятность схождения > 70%, python-библиотека fuzzywuzzy).
8. Реализован функционал регистрации + аутентификации пользователей.
9. Реализован функционал связи с админом путем отправки формы с сообщением на Gmail админа (требует до-настройки).
10. Реализован функционал комментариев к постам (без возможности их удаления/редактирования со стороны пользователей).
11. Реализован система отображения и навигации по тегам с помощью python-библиотеки django-taggit.
12. При первичной регистрации пользователя или удаления его аккаунта на указанный Email пользователя приходит оповещение с Gmail админа (требует до-настройки).
13. Все конфиденциальные настройки проекта и БД убраны в .env.
14. Стандартная django ORM пользователя содержит доп. данные, а не только стандартные (AbstractUser)
15. Реализован функционал логирования приложения в error.log с отображения логов сервера уровня: ERROR.
16. При публикации постов/статей через админ панель реализован функционал редактирования текста "на месте" в окне ввода текста с помощью python-библиотеки django-ckeditor.
17. В проекте подключен Webpack с обработкой всех CSS и JS файлов. Т.о. подключение в html только один скомпилированный JS файл.
18. Реализован функционал Docker + Docker-Compose(2 контейнера: django-server + db).
19. Админ панель содержит незначительную кастомизацию.

-----> V2.0 DRF + NuxtJS (Nuxt2)
# Подробности:
20. Авторизация и аутентификация пользователей реализована с помощью JWT токенов.
21. "Отработавшие" токены заносятся в blacklist при выходе из системы.
22. Все view-функции приложения были переписаны под API (APIView или ModelViewSet).
23. Тестирование всего API проводилось через Insomnia с созданием переменных окружения и аутентификацией пользователей (файл API-тестирования в .gitignore).
24. Client сервер реализован на Nuxt2 (NuxtJS).
25. Аутонтифицированные пользователи могут оставлять комментарии к постам.
26. При добавлении комментария пользователь видит уведомление в углу экрана (Toast).
27. Реализована пагинация по итерируемым объектам.
28. Реализованы методы props и emit при обмене информацией между страницами и их компонентами.
29. Запуск приложения возможен с помощью Docker.

